name: Deploy

# Run on pushes to main or PRs
on:
  # Pull request hook without any config. Launches for every pull request
  pull_request:
  # Launches for pushes to main or dev
  push:
    branches:
      - main
      - dev

env:
  REPO_NAME_ALPHANUMERIC: claiming-app-data
  STAGING_BUCKET_NAME: ${{ secrets.STAGING_BUCKET_NAME }}
  PROD_BUCKET_NAME: ${{ secrets.PROD_BUCKET_NAME }}

jobs:

  deploy:
    name: Deployment
    runs-on: ubuntu-latest

    steps:

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - name: Remove broken apt repos [Ubuntu]
        if: ${{ matrix.os }} == 'ubuntu-latest'
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done

      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Script to deploy to staging environment
      - name: 'Deploy to S3: Staging'
        if: github.ref == 'refs/heads/main'
        run: |
          aws s3 sync resources/data/allocations/ s3://${{ secrets.STAGING_BUCKET_NAME }}/current/allocations --cache-control max-age=0,no-cache,no-store,must-revalidate

      # Script to package release files
      - name: 'Package release version'
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          aws s3 sync resources/data/allocations/ s3://${{ secrets.STAGING_BUCKET_NAME }}/releases/${{ github.event.release.tag_name }}/allocations --cache-control max-age=0,no-cache,no-store,must-revalidate

      # Script to prepare production deployments
      - name: 'Prepare production deployment flow'
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: bash ./scripts/github/prepare_production_deployment.sh
        env:
          PROD_DEPLOYMENT_HOOK_TOKEN: ${{ secrets.PROD_DEPLOYMENT_HOOK_TOKEN }}
          PROD_DEPLOYMENT_HOOK_URL: ${{ secrets.PROD_DEPLOYMENT_HOOK_URL }}
          VERSION_TAG: ${{ github.event.release.tag_name }}
